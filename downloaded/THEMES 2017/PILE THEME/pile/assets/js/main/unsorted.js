// here we change the link of the Edit button in the Admin Bar
// to make sure it reflects the current page
function adminBarEditFix(id, editString, taxonomy) {
	//get the admin ajax url and clean it
	var baseEditURL = ajaxurl.replace('admin-ajax.php','post.php'),
		baseEditTaxURL = ajaxurl.replace('admin-ajax.php','edit-tags.php'),
		$editButton = $('#wp-admin-bar-edit a');

	if ( !empty($editButton) ) {
		if ( id !== undefined && editString !== undefined ) { //modify the current Edit button
			if (!empty(taxonomy)) { //it seems we need to edit a taxonomy
				$editButton.attr('href', baseEditTaxURL + '?tag_ID=' + id + '&taxonomy=' + taxonomy + '&action=edit');
			} else {
				$editButton.attr('href', baseEditURL + '?post=' + id + '&action=edit');
			}
			$editButton.html(editString);
		} else { //we have found an edit button but right now we don't need it anymore since we have no id
			$('#wp-admin-bar-edit').remove();
		}
	} else { //upss ... no edit button
		//lets see if we need one
		if ( id !== undefined && editString !== undefined ) { //we do need one after all
			//locate the New button because we need to add stuff after it
			var $newButton = $('#wp-admin-bar-new-content');

			if (!empty($newButton)) {
				if (!empty(taxonomy)) { //it seems we need to generate a taxonomy edit thingy
					$newButton.after('<li id="wp-admin-bar-edit"><a class="ab-item dJAX_internal" href="' + baseEditTaxURL + '?tag_ID=' + id + '&taxonomy=' + taxonomy + '&action=edit">' + editString + '</a></li>');
				} else { //just a regular edit
					$newButton.after('<li id="wp-admin-bar-edit"><a class="ab-item dJAX_internal" href="' + baseEditURL + '?post=' + id + '&action=edit">' + editString + '</a></li>');
				}
			}
		}
	}

	//Also we need to fix the (no-)customize-support class on body by running the WordPress inline script again
	// The original code is generated by the wp_customize_support_script() function in wp-includes/theme.php @2145
	var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

	request = true;

	b[c] = b[c].replace( rcs, ' ' );
	b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;

	//Plus, we need to change the url of the Customize button to the current url
	var $customizeButton = $('#wp-admin-bar-customize a'),
		baseCustomizeURL = ajaxurl.replace('admin-ajax.php','customize.php');
	if ( ! empty( $customizeButton ) ) {
		$customizeButton.attr( 'href', baseCustomizeURL + '?url=' + encodeURIComponent( window.location.href ) );
	}

}

/* --- Load AddThis Async --- */
function loadAddThisScript() {
	if ( window.addthis ) {
		try {
			if (globalDebug) {console.log("addthis::Load Script");}
			// Listen for the ready event
			addthis.addEventListener('addthis.ready', addthisReady);
			addthis.init();
		} catch( err ) {
			console.log( err );
		}
	}
}

/* --- AddThis On Ready - The API is fully loaded --- */
//only fire this the first time we load the AddThis API - even when using ajax
function addthisReady() {
	if (globalDebug) {console.log("addthis::Ready");}
	addThisInit();
}

/* --- AddThis Init --- */
function addThisInit() {
	if (window.addthis) {
		if (globalDebug) {console.log("addthis::Toolbox INIT");}

		addthis.toolbox('.js-share-icons');
	}
}

/* --- Do all the cleanup that is needed when going to another page with dJax --- */
function cleanupBeforeDJax() {
	if (globalDebug) {console.group("djax::Cleanup Before dJax");}

	/* --- KILL ROYALSLIDER ---*/
	var sliders = $('.js-pixslider');
	if (!empty(sliders)) {
		sliders.each(function() {
			var slider = $(this).data('royalSlider');
			if (!empty(slider)) {
				slider.destroy();
			}
		});
	}

	/* --- KILL MAGNIFIC POPUP ---*/
	//when hitting back or forward we need to make sure that there is no rezidual Magnific Popup
	$.magnificPopup.close(); // Close popup that is currently opened (shorthand)

    if (globalDebug) {console.groupEnd();}

}

function loadUpDJaxOnly(data) {
	if (globalDebug) {console.group("djax::loadup - dJaxOnly");}

	//fire the AddThis reinitialization separate from loadUp()
	//because on normal load we want to fire it only after the API is fully loaded - addthisReady()
	addThisInit();

	//find and initialize Tiled Galleries via Jetpack
	if ( typeof tiledGalleries !== "undefined" ) {
		if (globalDebug) {console.log("Find and setup new galleries - Jetpack");}
		tiledGalleries.findAndSetupNewGalleries();
	}

	//lets do some Google Analytics Tracking
	if (window._gaq) {
		_gaq.push(['_trackPageview']);
	}

	$('.site-content').find( 'video, audio' ).mediaelementplayer();

	if (globalDebug) {console.groupEnd();}
}

function scaleImage($images, amount) {

	amount = (typeof amount == "undefined") ? 1 : amount;

	$images.each(function(i, element) {

		var $image = $(element);

//		$image.css({
//			width: '',
//			top: '',
//			left: ''
//		});

		if ( $image.is('img') ) {
			$image.imagesLoaded( scaleThis );
		}

		if ( $image.is('video') ) {
			if ( element.readyState > 3 ) {
				scaleThis();
			} else {
				$image.one( 'canplaythrough', scaleThis );
			}
		}

		function scaleThis() {
			var imageWidth  = $image.outerWidth(),
				imageHeight = $image.outerHeight(),
				$hero       = $image.parent(),
				heroHeight  = $hero.outerHeight(),
				scaleX      = (windowWidth + 2) / imageWidth,
				scaleY      = (heroHeight + (windowHeight - heroHeight) * amount + 2) / imageHeight,
				scale       = Math.max(scaleX, scaleY);

			$image.css({
				width: imageWidth * scale,
				top: (heroHeight - imageHeight * scale) / 2,
				left: (windowWidth - imageWidth * scale) / 2
			});
		}

	});
}

function getInternetExplorerVersion() {
  var rv = false;
  if (navigator.appName == 'Microsoft Internet Explorer') {
    var ua = navigator.userAgent;
    var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
    if (re.exec(ua) != null)
      rv = parseFloat( RegExp.$1 );
  } else if (navigator.appName == 'Netscape') {
    var ua = navigator.userAgent;
    var re  = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
    if (re.exec(ua) != null)
      rv = parseFloat( RegExp.$1 );
  }
  return rv;
}
